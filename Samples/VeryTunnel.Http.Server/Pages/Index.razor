@page "/"
@using VeryTunnel.Contracts;
@inject ITunnelServer tunnelServer

<PageTitle>Counter</PageTitle>

<table class="table">
    <thead>
        <tr>
            <th>Agent</th>
            <th></th>
            <th>Operations</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var agent in tunnelServer.Agents)
        {
            <tr @key="agent.AgentName">
                <td>@agent.AgentName</td>
                <td></td>
                <td>
                    <button class="btn btn-primary" @onclick="()=>CreateTunnel(agent)">Create New Tunnel</button>
                </td>
            </tr>
            if (true)
            {
                var key = $"{agent.AgentName}-tunnels";
                <tr @key="key">
                    <td colspan="3">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>AgentPort</th>
                                    <th>ServerPort</th>
                                    <th>SessionCount</th>
                                    <th>Operations</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tunnel in agent.Tunnels)
                                {
                                    <tr>
                                        <td>@tunnel.AgentPort</td>
                                        <td>@tunnel.ServerPort</td>
                                        <td>@tunnel.Sessions.Count()</td>
                                        <td>
                                            <button class="btn btn-danger" @onclick="()=>CloseTunnel(tunnel)">Close</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    private void RegisterTunnelEvents(ITunnel tunnel)
    {
        tunnel.OnSessionCreated += (a) => InvokeAsync(StateHasChanged);
        tunnel.OnSessionClosed += (a) => InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        tunnelServer.OnAgentConnected += (agent) => InvokeAsync(StateHasChanged);
        tunnelServer.OnAgentDisConnected += (agent) => InvokeAsync(StateHasChanged);
        foreach (var agent in tunnelServer.Agents)
            foreach (var tunnel in agent.Tunnels)
                RegisterTunnelEvents(tunnel);
    }

    private async Task CreateTunnel(IAgent agent)
    {
        //Specify agentport and serverport here
        var tunnel = await agent.CreateTunnel(80, 0);
        RegisterTunnelEvents(tunnel);
    }

    private void CloseTunnel(ITunnel tunnel)
    {
        tunnel.Close().ConfigureAwait(false).GetAwaiter().OnCompleted(() =>
        {
            InvokeAsync(StateHasChanged);
        });
    }
}